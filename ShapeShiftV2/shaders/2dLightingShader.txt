//shader vertex
#version 430 core
layout(location = 0) in vec3 aPos;
layout(location = 1) in vec2 aTexCoord;
layout(location = 2) in vec4 c;


out vec2 TexCoord;
out vec4 color;
out vec4 fragPos;
 
uniform mat4 model;
uniform mat4 projection;
uniform mat4 view;



void main()
{
    gl_Position = projection * view * model * vec4(aPos, 1.0);
	TexCoord = aTexCoord;
    color = c;
    fragPos = model * vec4(aPos, 1.0);
}

//shader fragment
#version 430 core
out vec4 FragColor;
in vec2 TexCoord;
in vec4 color;
in vec4 fragPos;

const int MAXLIGHTS = 100;

uniform int size;
uniform vec3 lightPos[MAXLIGHTS];
uniform vec3 lightColor[MAXLIGHTS];
uniform float lightBrightness[MAXLIGHTS];

uniform sampler2D texture1;

void main()
{
    float ambientStrength = 0.1;
    vec3 ambient = ambientStrength * vec3(1.0, 1.0, 1.0);
    vec4 finalResult;
    
    if(size != 0)
    {
        vec3 diffusions = vec3(0.0, 0.0, 0.0);

         for(int i = 0; i < MAXLIGHTS; ++i)
         {
            float distance = sqrt(pow((lightPos[i].x - fragPos.x), 2) + pow((lightPos[i].y - fragPos.y), 2));
            float distanceRatio = lightBrightness[i]/distance;
           
            vec3 diffusion;
            if(distanceRatio >= 1.0)
             {
                diffusion = lightColor[i];
             }
            else
            {
                 diffusion = distanceRatio * lightColor[i];
            }

            diffusions = diffusions + diffusion;

            if((i + 1) == size)
            {
                i = MAXLIGHTS;
            }
         }
        finalResult = vec4((diffusions + ambient), 1.0) * color;
    }
    else
    {
        finalResult = vec4(ambient, 1.0) * color;
    }


    FragColor = texture(texture1, TexCoord) * vec4(finalResult);
}
